$ echo -e "Here are\nsome\nwords for you." | ./py3line.py 'print(len(line.split()))'
2
1
3

<EXITCODE=0>

$ echo -e "1\n2\n3\n4\n5\n6" | ./py3line.py 'v = int(line); if v % 2 == 0: print(v, "is even!")'
2 is even!
4 is even!
6 is even!

<EXITCODE=0>

$ echo -e "1\n2\n3\n4\n5\n6" | ./py3line.py 'stream = list(stream)[:3]; print(line)'  # `head`
1
2
3

<EXITCODE=0>

$ echo -e "1\n2\n3\n4\n5\n6" | ./py3line.py 'stream = list(stream)[-3:]; print(line)'  # `tail`
4
5
6

<EXITCODE=0>

$ echo -e "a\nb\nc\nd\ne\nf" | ./py3line.py 'stream = list(stream)[1:-1]; print(line.upper())'  # remove leading and trailing lines, then uppercase
B
C
D
E

<EXITCODE=0>

$ echo -e "setup.py\nMakefile" | ./py3line.py 'print(subprocess.run("false").returncode, "line!", line)'
1 line! setup.py
1 line! Makefile

<EXITCODE=0>

$ echo -e "echo true\nfalse" | ./py3line.py 'code, text = subprocess.getstatusoutput(line); print(code, text)'
0 true
1

<EXITCODE=0>

$ echo -e "2\n4" | ./py3line.py 'print(list(range(int(line))))'
[0, 1]
[0, 1, 2, 3]

<EXITCODE=0>

$ echo -e "2\n4" | ./py3line.py 'line = range(0, int(line)); stream = itertools.chain.from_iterable(stream); print(line)' # If you wanted each number to come on its own line
0
1
0
1
2
3

<EXITCODE=0>
