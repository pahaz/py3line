$ echo -e "Here are\nsome\nwords for you." | ./py3line.py 'x.split(); len(x)'
2
1
3

<EXITCODE=0>

$ echo -e "1\n2\n3\n4\n5\n6" | ./py3line.py 'int(x); skip if x % 2 else x; x, "is even!"'
2 is even!
4 is even!
6 is even!

<EXITCODE=0>

$ echo -e "1\n2\n3\n4\n5\n6" | ./py3line.py 'xx[:3]'  # `head`
1
2
3

<EXITCODE=0>

$ echo -e "1\n2\n3\n4\n5\n6" | ./py3line.py 'xx[-3:]'  # `tail`
4
5
6

<EXITCODE=0>

$ echo -e "a\nb\nc\nd\ne\nf" | ./py3line.py 'xx[1:-1]; x.upper()'  # remove leading and trailing lines, then uppercase
B
C
D
E

<EXITCODE=0>

$ echo -e "setup.py\nMakefile" | ./py3line.py 'str(run("false").returncode) + "line!" + x'
1line!setup.py
1line!Makefile

<EXITCODE=0>

$ echo -e "echo true\nfalse" | ./py3line.py 'sh(x) or "(failed)"'
true

<EXITCODE=0>

$ echo -e "2\n4" | ./py3line.py 'int(x); range(0, x) ; repr(x)'
[0, 1]
[0, 1, 2, 3]

<EXITCODE=0>

# If you wanted each number to come on its own line
$ echo -e "2\n4" | ./py3line.py -m itertools 'int(x); range(0, x); itertools.chain.from_iterable(xx)'
0
1
0
1
2
3

<EXITCODE=0>
